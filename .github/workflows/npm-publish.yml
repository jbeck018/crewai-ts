name: Publish to NPM

on:
  push:
    branches: [ main ]
    # Only trigger on version changes to avoid unnecessary deployments
    paths:
      - 'package.json'
  workflow_dispatch: # Allow manual triggering

jobs:
  # First check if version is new before proceeding
  check-version:
    name: Check Version Change
    runs-on: ubuntu-latest
    outputs:
      should_publish: ${{ steps.check.outputs.should_publish }}
      version: ${{ steps.check.outputs.version }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 2 # Need minimal history to compare changes
      
      - name: Check if package.json version changed
        id: check
        # Use efficient grep and awk for version comparison instead of heavy parsing
        run: |
          CURRENT_VERSION=$(grep '"version":' package.json | awk -F\" '{print $4}')
          echo "Current version: $CURRENT_VERSION"
          
          git checkout HEAD~1 package.json
          PREVIOUS_VERSION=$(grep '"version":' package.json | awk -F\" '{print $4}')
          echo "Previous version: $PREVIOUS_VERSION"
          
          git checkout HEAD package.json
          
          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ]; then
            echo "Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
            echo "should_publish=true" >> "$GITHUB_OUTPUT"
            echo "version=$CURRENT_VERSION" >> "$GITHUB_OUTPUT"
          else
            echo "Version unchanged, skipping publish"
            echo "should_publish=false" >> "$GITHUB_OUTPUT"
            echo "version=$CURRENT_VERSION" >> "$GITHUB_OUTPUT"
          fi

  # Memory-optimized validation before publishing
  validate-and-test:
    name: Validate and Test
    needs: check-version
    if: ${{ needs.check-version.outputs.should_publish == 'true' }}
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
      
      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          cache: true

      - name: Install build tools and dependencies
        # Install build tools needed for native modules
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3
          npm install -g node-gyp
          bun install --frozen-lockfile
      
      - name: Type check
        # Run memory-optimized type checking
        run: bun run type-check
      
      - name: Build project
        # Use optimized build process
        run: bun run build
      
      - name: Check bundle size
        # Ensure package size remains optimized
        run: bunx bundlesize

  # Optimized publishing process
  publish-package:
    name: Publish Package
    needs: [check-version, validate-and-test]
    if: ${{ needs.check-version.outputs.should_publish == 'true' }}
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '21'
          registry-url: 'https://registry.npmjs.org/'
      
      - name: Set up Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
          cache: true
        
      - name: Install build tools and dependencies
        # Install build tools needed for native modules
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3
          npm install -g node-gyp
          bun install --frozen-lockfile
      
      - name: Build package
        # Optimize TypeScript compilation for production with explicit type declarations
        run: |
          echo "Building TypeScript project..."
          # Use TypeScript directly to ensure proper declaration file generation
          npx tsc --project tsconfig.production.json --declaration --declarationMap
          
          # List the compiled files to verify output
          echo "Compiled files in dist directory:"
          find ./dist -type f | sort
      
      - name: Copy package files
        run: |
          echo "Preparing optimized package for npm..."
          # Create a temp directory for the package
          mkdir -p ./npm-package
          
          # First ensure the dist directory exists and has content
          if [ ! -d "./dist" ] || [ -z "$(ls -A ./dist)" ]; then
            echo "Error: dist directory is empty or doesn't exist!"
            exit 1
          fi
          
          # Copy the compiled files to the package directory - use verbose to debug
          echo "Copying compiled files to package directory..."
          cp -rv ./dist/* ./npm-package/
          
          # Copy package.json and README to the package directory
          cp README.md package.json ./npm-package/
          
          # Ensure typesVersions field is preserved
          node -e "
            const pkg = require('./package.json');
            const npmPkg = require('./npm-package/package.json');
            npmPkg.typesVersions = pkg.typesVersions;
            require('fs').writeFileSync('./npm-package/package.json', JSON.stringify(npmPkg, null, 2));
          "
          
      - name: Verify type declarations
        run: |
          echo "Verifying type declarations..."
          if [ ! -f ./npm-package/index.d.ts ]; then
            echo "Error: index.d.ts not found!"
            exit 1
          fi
          
          # Check for key module type declarations
          for dir in agent crew task tools memory llm flow; do
            if [ ! -d ./npm-package/$dir ] || [ ! -f ./npm-package/$dir/index.d.ts ]; then
              echo "Warning: Type declarations for $dir may be missing"
            else
              echo "âœ“ Found type declarations for $dir"
            fi
          done
          
          # Count files by type to ensure we have all necessary files
          echo "File counts by extension:"
          find ./npm-package -type f | grep -v 'node_modules' | sed 's/.*\.//' | sort | uniq -c
          
          # List the contents of the package for verification
          echo "Package contents (top-level):"
          ls -la ./npm-package
          
          echo "Total files in package:"
          find ./npm-package -type f | wc -l
          
      - name: Create bin directory
        run: mkdir -p ./npm-package/bin
          
      - name: Create CLI file
        run: |
          echo '#!/usr/bin/env node' > ./npm-package/bin/crewai.js
          echo '' >> ./npm-package/bin/crewai.js
          echo "import { cli } from '../cli/index.js';" >> ./npm-package/bin/crewai.js
          echo '' >> ./npm-package/bin/crewai.js
          echo 'cli();' >> ./npm-package/bin/crewai.js
          chmod +x ./npm-package/bin/crewai.js
      
      - name: Setup NPM Authentication
        run: |
          echo "//registry.npmjs.org/:_authToken=${NODE_AUTH_TOKEN}" > ~/.npmrc
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
          
      - name: Prepare package for publishing
        run: |
          # Create a tarball of the package to inspect before publishing
          cd npm-package
          npm pack
          
          # Extract the tarball to verify its contents
          mkdir -p ../package-check
          tar -xzf *.tgz -C ../package-check
          
          echo "Contents of the final package tarball:"
          find ../package-check -type f | sort
          
          echo "Total files in tarball:"
          find ../package-check -type f | wc -l
          
          # If there are fewer than 10 files in the tarball, something is wrong
          FILE_COUNT=$(find ../package-check -type f | wc -l)
          if [ $FILE_COUNT -lt 10 ]; then
            echo "ERROR: Package tarball contains too few files ($FILE_COUNT). Expected at least 10 files."
            exit 1
          fi
      
      - name: Publish to NPM
        run: |
          cd npm-package
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{secrets.NPM_TOKEN}}
      
      # - name: Create GitHub Release
      #   uses: softprops/action-gh-release@v1
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     tag_name: v${{ needs.check-version.outputs.version }}
      #     name: Release v${{ needs.check-version.outputs.version }}
      #     draft: false
      #     prerelease: false

  # # Deploy documentation after successful publish
  # deploy-docs:
  #   name: Deploy Documentation
  #   needs: [publish-package]
  #   runs-on: ubuntu-latest
    
  #   steps:
  #     - uses: actions/checkout@v3
      
  #     - name: Set up Ruby
  #       uses: ruby/setup-ruby@v1
  #       with:
  #         ruby-version: 3.0
  #         bundler-cache: true
      
  #     - name: Build documentation
  #       # Resource-efficient Jekyll build
  #       run: |
  #         cd docs
  #         bundle install
  #         bundle exec jekyll build --baseurl "/${{ github.event.repository.name }}"
      
  #     - name: Deploy documentation to GitHub Pages
  #       uses: peaceiris/actions-gh-pages@v3
  #       with:
  #         github_token: ${{ secrets.GITHUB_TOKEN }}
  #         publish_dir: ./docs/_site
  #         # Memory-efficient publishing with incremental updates
  #         force_orphan: false
  #         enable_jekyll: false
